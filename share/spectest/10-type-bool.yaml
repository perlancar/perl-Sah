tests: 
  - 
    input: 0
    name: "type check: must accept 0"
    schema: bool
    valid: 1
  - 
    input: 1
    name: "type check: must accept 1"
    schema: bool
    valid: 1
  - 
    input: []

    name: "type check: must reject []"
    schema: bool
    valid: 0
  - 
    input: {}

    name: "type check: must reject {}"
    schema: bool
    valid: 0
  - 
    input: ~
    name: must accept undefined value
    schema: bool
    valid: 1
  - 
    input: ~
    name: req=0 must accept undefined value
    schema: 
      - bool
      - req
      - 0
    valid: 1
  - 
    input: ~
    name: req=1 must reject undefined value
    schema: 
      - bool
      - req
      - 1
    valid: 0
  - 
    input: 1
    name: forbidden=0 must accept defined value
    schema: 
      - bool
      - forbidden
      - 0
    valid: 1
  - 
    input: 1
    name: forbidden=1 must reject defined value
    schema: 
      - bool
      - forbidden
      - 1
    valid: 0
  - 
    input: ~
    name: "default: must accept valid default 1"
    schema: 
      - bool*
      - default
      - 1
    valid: 1
  - 
    input: ~
    name: "default: must reject invalid default []"
    schema: 
      - bool*
      - default
      - []

    valid: 0
  - 
    input: 1
    name: .err_level=error (clause=is, ok)
    schema: 
      - bool
      - is
      - 1
    valid: 1
  - 
    input: 0
    name: .err_level=error (clause=is, nok)
    schema: 
      - bool
      - is
      - 1
    valid: 0
  - 
    input: 1
    name: .err_level=warn (clause=is, ok)
    schema: 
      - bool
      - is
      - 1
      - is.err_level
      - warn
    valid: 1
  - 
    input: 0
    name: .err_level=warn (clause=is, nok)
    schema: 
      - bool*
      - is
      - 1
      - is.err_level
      - warn
    valid: 1
    warnings: 1
  - 
    input: 0
    name: "is: must accept same value"
    schema: 
      - bool
      - is
      - 0
    valid: 1
  - 
    input: 0
    name: "is: must reject different value"
    schema: 
      - bool
      - is
      - 1
    valid: 0
  - 
    input: 0
    name: "!is (nok)"
    schema: 
      - bool
      - "!is"
      - 0
    valid: 0
  - 
    input: 0
    name: "!is (ok)"
    schema: 
      - bool
      - "!is"
      - 1
    valid: 1
  - 
    input: 0
    name: is.op=not (nok)
    schema: 
      - bool
      - is
      - 0
      - is.op
      - not
    valid: 0
  - 
    input: 0
    name: is.op=not (ok)
    schema: 
      - bool
      - is
      - 1
      - is.op
      - not
    valid: 1
  - 
    input: 0
    name: is& (no items)
    schema: 
      - bool
      - is&
      - []

    valid: 1
  - 
    input: 0
    name: is& (ok)
    schema: 
      - bool
      - is&
      - &1 
        - 0
        - 0
    valid: 1
  - 
    errors: 1
    input: 0
    name: is& (nok + ok)
    schema: 
      - bool
      - is&
      - 
        - 1
        - 0
    valid: 0
  - 
    errors: 1
    input: 0
    name: is& (ok + nok)
    schema: 
      - bool
      - is&
      - 
        - 0
        - 1
    valid: 0
  - 
    errors: 2
    input: 0
    name: is& (nok + nok)
    schema: 
      - bool
      - is&
      - 
        - 1
        - 1
    valid: 0
  - 
    input: 0
    name: is.op=and (no items)
    schema: 
      - bool
      - is
      - []

      - is.op
      - and
    valid: 1
  - 
    input: 0
    name: is.op=and (ok)
    schema: 
      - bool
      - is
      - *1
      - is.op
      - and
    valid: 1
  - 
    errors: 1
    input: 0
    name: is.op=and (nok + ok)
    schema: 
      - bool
      - is
      - 
        - 1
        - 0
      - is.op
      - and
    valid: 0
  - 
    errors: 1
    input: 0
    name: is.op=and (ok + nok)
    schema: 
      - bool
      - is
      - 
        - 0
        - 1
      - is.op
      - and
    valid: 0
  - 
    errors: 2
    input: 0
    name: is.op=and (nok + nok)
    schema: 
      - bool
      - is
      - 
        - 1
        - 1
      - is.op
      - and
    valid: 0
  - 
    input: 0
    name: is| (no items)
    schema: 
      - bool
      - is|
      - []

    valid: 1
  - 
    input: 0
    name: is| (ok)
    schema: 
      - bool
      - is|
      - *1
    valid: 1
  - 
    input: 0
    name: is| (nok + ok)
    schema: 
      - bool
      - is|
      - 
        - 1
        - 0
    valid: 1
  - 
    input: 0
    name: is| (ok + nok)
    schema: 
      - bool
      - is|
      - 
        - 0
        - 1
    valid: 1
  - 
    errors: 1
    input: 0
    name: is| (nok + nok)
    schema: 
      - bool
      - is|
      - 
        - 1
        - 1
    valid: 0
  - 
    input: 0
    name: is.op=or (no items)
    schema: 
      - bool
      - is
      - []

      - is.op
      - or
    valid: 1
  - 
    input: 0
    name: is.op=or (ok)
    schema: 
      - bool
      - is
      - *1
      - is.op
      - or
    valid: 1
  - 
    input: 0
    name: is.op=or (nok + ok)
    schema: 
      - bool
      - is
      - 
        - 1
        - 0
      - is.op
      - or
    valid: 1
  - 
    input: 0
    name: is.op=or (ok + nok)
    schema: 
      - bool
      - is
      - 
        - 0
        - 1
      - is.op
      - or
    valid: 1
  - 
    errors: 1
    input: 0
    name: is.op=or (nok + nok)
    schema: 
      - bool
      - is
      - 
        - 1
        - 1
      - is.op
      - or
    valid: 0
  - 
    input: 0
    name: is.op=none (empty items)
    schema: 
      - bool
      - is
      - []

      - is.op
      - none
    valid: 1
  - 
    input: 0
    name: is.op=none (nok + nok)
    schema: 
      - bool
      - is
      - 
        - 1
        - 1
      - is.op
      - none
    valid: 1
  - 
    errors: 1
    input: 0
    name: is.op=none (nok + ok)
    schema: 
      - bool
      - is
      - 
        - 1
        - 0
      - is.op
      - none
    valid: 0
  - 
    errors: 1
    input: 0
    name: is.op=none (ok + nok)
    schema: 
      - bool
      - is
      - 
        - 0
        - 1
      - is.op
      - none
    valid: 0
  - 
    errors: 2
    input: 0
    name: is.op=none (ok + ok)
    schema: 
      - bool
      - is
      - *1
      - is.op
      - none
    valid: 0
  - 
    input: 0
    name: "in: must accept valid choices"
    schema: 
      - bool
      - in
      - &2 
        - 0
        - 1
    valid: 1
  - 
    input: 0
    name: "in: must reject empty choices"
    schema: 
      - bool
      - in
      - []

    valid: 0
  - 
    input: 0
    name: "!in (nok)"
    schema: 
      - bool
      - "!in"
      - *2
    valid: 0
  - 
    input: 0
    name: "!in (ok)"
    schema: 
      - bool
      - "!in"
      - &3 []

    valid: 1
  - 
    input: 0
    name: in.op=not (nok)
    schema: 
      - bool
      - in
      - *2
      - in.op
      - not
    valid: 0
  - 
    input: 0
    name: in.op=not (ok)
    schema: 
      - bool
      - in
      - *3
      - in.op
      - not
    valid: 1
  - 
    input: 0
    name: in& (no items)
    schema: 
      - bool
      - in&
      - []

    valid: 1
  - 
    input: 0
    name: in& (ok)
    schema: 
      - bool
      - in&
      - &4 
        - *2
        - 
          - 0
          - 1
    valid: 1
  - 
    errors: 1
    input: 0
    name: in& (nok + ok)
    schema: 
      - bool
      - in&
      - 
        - *3
        - *2
    valid: 0
  - 
    errors: 1
    input: 0
    name: in& (ok + nok)
    schema: 
      - bool
      - in&
      - 
        - *2
        - *3
    valid: 0
  - 
    errors: 2
    input: 0
    name: in& (nok + nok)
    schema: 
      - bool
      - in&
      - 
        - *3
        - &5 []

    valid: 0
  - 
    input: 0
    name: in.op=and (no items)
    schema: 
      - bool
      - in
      - []

      - in.op
      - and
    valid: 1
  - 
    input: 0
    name: in.op=and (ok)
    schema: 
      - bool
      - in
      - *4
      - in.op
      - and
    valid: 1
  - 
    errors: 1
    input: 0
    name: in.op=and (nok + ok)
    schema: 
      - bool
      - in
      - 
        - *3
        - *2
      - in.op
      - and
    valid: 0
  - 
    errors: 1
    input: 0
    name: in.op=and (ok + nok)
    schema: 
      - bool
      - in
      - 
        - *2
        - *3
      - in.op
      - and
    valid: 0
  - 
    errors: 2
    input: 0
    name: in.op=and (nok + nok)
    schema: 
      - bool
      - in
      - 
        - *3
        - *5
      - in.op
      - and
    valid: 0
  - 
    input: 0
    name: in| (no items)
    schema: 
      - bool
      - in|
      - []

    valid: 1
  - 
    input: 0
    name: in| (ok)
    schema: 
      - bool
      - in|
      - *4
    valid: 1
  - 
    input: 0
    name: in| (nok + ok)
    schema: 
      - bool
      - in|
      - 
        - *3
        - *2
    valid: 1
  - 
    input: 0
    name: in| (ok + nok)
    schema: 
      - bool
      - in|
      - 
        - *2
        - *3
    valid: 1
  - 
    errors: 1
    input: 0
    name: in| (nok + nok)
    schema: 
      - bool
      - in|
      - 
        - *3
        - *5
    valid: 0
  - 
    input: 0
    name: in.op=or (no items)
    schema: 
      - bool
      - in
      - []

      - in.op
      - or
    valid: 1
  - 
    input: 0
    name: in.op=or (ok)
    schema: 
      - bool
      - in
      - *4
      - in.op
      - or
    valid: 1
  - 
    input: 0
    name: in.op=or (nok + ok)
    schema: 
      - bool
      - in
      - 
        - *3
        - *2
      - in.op
      - or
    valid: 1
  - 
    input: 0
    name: in.op=or (ok + nok)
    schema: 
      - bool
      - in
      - 
        - *2
        - *3
      - in.op
      - or
    valid: 1
  - 
    errors: 1
    input: 0
    name: in.op=or (nok + nok)
    schema: 
      - bool
      - in
      - 
        - *3
        - *5
      - in.op
      - or
    valid: 0
  - 
    input: 0
    name: in.op=none (empty items)
    schema: 
      - bool
      - in
      - []

      - in.op
      - none
    valid: 1
  - 
    input: 0
    name: in.op=none (nok + nok)
    schema: 
      - bool
      - in
      - 
        - *3
        - *5
      - in.op
      - none
    valid: 1
  - 
    errors: 1
    input: 0
    name: in.op=none (nok + ok)
    schema: 
      - bool
      - in
      - 
        - *3
        - *2
      - in.op
      - none
    valid: 0
  - 
    errors: 1
    input: 0
    name: in.op=none (ok + nok)
    schema: 
      - bool
      - in
      - 
        - *2
        - *3
      - in.op
      - none
    valid: 0
  - 
    errors: 2
    input: 0
    name: in.op=none (ok + ok)
    schema: 
      - bool
      - in
      - *4
      - in.op
      - none
    valid: 0
  - 
    input: 1
    name: "min: 1 0"
    schema: 
      - bool
      - min
      - 0
    valid: 1
  - 
    input: 1
    name: "min: 1 1"
    schema: 
      - bool
      - min
      - 1
    valid: 1
  - 
    input: 0
    name: "min: 0 1 -> fail"
    schema: 
      - bool
      - min
      - 1
    valid: 0
  - 
    input: 1
    name: "xmin: 1 0"
    schema: 
      - bool
      - xmin
      - 0
    valid: 1
  - 
    input: 1
    name: "xmin: 1 1 -> fail"
    schema: 
      - bool
      - xmin
      - 1
    valid: 0
  - 
    input: 0
    name: "xmin: 0 1 -> fail"
    schema: 
      - bool
      - xmin
      - 1
    valid: 0
  - 
    input: 1
    name: "max: 1 0 -> fail"
    schema: 
      - bool
      - max
      - 0
    valid: 0
  - 
    input: 1
    name: "max: 1 1"
    schema: 
      - bool
      - max
      - 1
    valid: 1
  - 
    input: 0
    name: "max: 0 1"
    schema: 
      - bool
      - max
      - 1
    valid: 1
  - 
    input: 1
    name: "xmax: 1 0 -> fail"
    schema: 
      - bool
      - xmax
      - 0
    valid: 0
  - 
    input: 1
    name: "xmax: 1 1 -> fail"
    schema: 
      - bool
      - xmax
      - 1
    valid: 0
  - 
    input: 0
    name: "xmax: 0 1"
    schema: 
      - bool
      - xmax
      - 1
    valid: 1
  - 
    input: 1
    name: "between: 1 0 & 1"
    schema: 
      - bool
      - between
      - 
        - 0
        - 1
    valid: 1
  - 
    input: 1
    name: "between: 1 0 & 1"
    schema: 
      - bool
      - between
      - 
        - 0
        - 1
    valid: 1
  - 
    input: 1
    name: "between: 1 1 & 1"
    schema: 
      - bool
      - between
      - 
        - 1
        - 1
    valid: 1
  - 
    input: 0
    name: "between: 0 1 & 1 -> fail"
    schema: 
      - bool
      - between
      - 
        - 1
        - 1
    valid: 0
  - 
    input: 1
    name: "xbetween: 1 0 & 1"
    schema: 
      - bool
      - xbetween
      - 
        - 0
        - 1
    valid: 0
  - 
    input: 1
    name: "xbetween: 1 0 & 1 -> fail"
    schema: 
      - bool
      - xbetween
      - 
        - 0
        - 1
    valid: 0
  - 
    input: 1
    name: "xbetween: 1 1 & 1 -> fail"
    schema: 
      - bool
      - xbetween
      - 
        - 1
        - 1
    valid: 0
  - 
    input: 0
    name: "xbetween: 0 1 & 1 -> fail"
    schema: 
      - bool
      - xbetween
      - 
        - 1
        - 1
    valid: 0
  - 
    input: 1
    name: "is_true: 1 (ok)"
    schema: 
      - bool
      - is_true
      - 1
    valid: 1
  - 
    input: 0
    name: "is_true: 1 (nok)"
    schema: 
      - bool
      - is_true
      - 1
    valid: 0
  - 
    input: 0
    name: "is_true: 0 (ok)"
    schema: 
      - bool
      - is_true
      - 0
    valid: 1
  - 
    input: 1
    name: "is_true: 0 (nok)"
    schema: 
      - bool
      - is_true
      - 0
    valid: 0
  - 
    input: 0
    name: "is_true: undef (ok 1)"
    schema: 
      - bool
      - is_true
      - ~
    valid: 1
  - 
    input: 1
    name: "is_true: undef (ok 2)"
    schema: 
      - bool
      - is_true
      - ~
    valid: 1
version: v0.9.20 (generated by devscripts/gen-type-spectest on Tue Nov 27 10:35:10 2012)
