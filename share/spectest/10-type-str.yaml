tests: 
  - 
    input: 0
    name: "type check: must accept 0"
    schema: str
    valid: 1
  - 
    input: '1.1'
    name: "type check: must accept 1.1"
    schema: str
    valid: 1
  - 
    input: ''
    name: "type check: must accept "
    schema: str
    valid: 1
  - 
    input: "str\n"
    name: "type check: must accept str\n"
    schema: str
    valid: 1
  - 
    input: []

    name: "type check: must reject []"
    schema: str
    valid: 0
  - 
    input: {}

    name: "type check: must reject {}"
    schema: str
    valid: 0
  - 
    input: ~
    name: must accept undefined value
    schema: str
    valid: 1
  - 
    input: ~
    name: req=0 must accept undefined value
    schema: 
      - str
      - req
      - 0
    valid: 1
  - 
    input: ~
    name: req=1 must reject undefined value
    schema: 
      - str
      - req
      - 1
    valid: 0
  - 
    input: a
    name: forbidden=0 must accept defined value
    schema: 
      - str
      - forbidden
      - 0
    valid: 1
  - 
    input: a
    name: forbidden=1 must reject defined value
    schema: 
      - str
      - forbidden
      - 1
    valid: 0
  - 
    input: ~
    name: "default: must accept valid default a"
    schema: 
      - str*
      - default
      - a
    valid: 1
  - 
    input: ~
    name: "default: must reject invalid default []"
    schema: 
      - str*
      - default
      - []

    valid: 0
  - 
    dies: 1
    input: a
    name: clause (dies, unknown clause)
    schema: 
      - str*
      - clause
      - foo
  - 
    input: a
    name: clause (ok)
    schema: 
      - str*
      - clause
      - 
        - match
        - a
    valid: 1
  - 
    errors: 1
    input: a
    name: clause (nok)
    schema: 
      - str*
      - clause
      - 
        - match
        - b
    valid: 0
  - 
    dies: 1
    input: a
    name: clset (dies, unknown clause)
    schema: 
      - str*
      - clset
      - 
        foo: 1
  - 
    dies: 1
    input: a
    name: clset (dies, unknown attr)
    schema: 
      - str*
      - clset
      - 
        min_len: 1
        min_len.foo: 1
  - 
    input: a
    name: clset (empty = ok)
    schema: 
      - str*
      - clset
      - {}

    valid: 1
  - 
    input: a
    name: clset (ignored clause/attr = ok)
    schema: 
      - str*
      - clset
      - 
        _foo: 1
        foo._bar: 2
    valid: 1
  - 
    input: a
    name: clset (ok + ok = ok)
    schema: 
      - str*
      - clset
      - 
        len: 1
        match: a
    valid: 1
  - 
    input: a
    name: clset (ok + nok = nok)
    schema: 
      - str*
      - clset
      - 
        len: 2
        match: a
    valid: 0
  - 
    input: a
    name: clset (nok + ok = nok)
    schema: 
      - str*
      - clset
      - 
        len: 1
        match: b
    valid: 0
  - 
    input: a
    name: clset (nok + nok = nok)
    schema: 
      - str*
      - clset
      - 
        len: 2
        match: b
    valid: 0
  - 
    input: a
    name: .err_level=error (clause=is, ok)
    schema: 
      - str
      - is
      - a
    valid: 1
  - 
    input: "a\n"
    name: .err_level=error (clause=is, nok)
    schema: 
      - str
      - is
      - a
    valid: 0
  - 
    input: a
    name: .err_level=warn (clause=is, ok)
    schema: 
      - str
      - is
      - a
      - is.err_level
      - warn
    valid: 1
  - 
    input: "a\n"
    name: .err_level=warn (clause=is, nok)
    schema: 
      - str*
      - is
      - a
      - is.err_level
      - warn
    valid: 1
    warnings: 1
  - 
    input: a
    name: "is: must accept same value"
    schema: 
      - str
      - is
      - a
    valid: 1
  - 
    input: a
    name: "is: must reject different value"
    schema: 
      - str
      - is
      - b
    valid: 0
  - 
    input: a
    name: "!is (nok)"
    schema: 
      - str
      - "!is"
      - a
    valid: 0
  - 
    input: a
    name: "!is (ok)"
    schema: 
      - str
      - "!is"
      - b
    valid: 1
  - 
    input: a
    name: is.op=not (nok)
    schema: 
      - str
      - is
      - a
      - is.op
      - not
    valid: 0
  - 
    input: a
    name: is.op=not (ok)
    schema: 
      - str
      - is
      - b
      - is.op
      - not
    valid: 1
  - 
    input: a
    name: is& (no items)
    schema: 
      - str
      - is&
      - []

    valid: 1
  - 
    input: a
    name: is& (ok)
    schema: 
      - str
      - is&
      - &1 
        - a
        - a
    valid: 1
  - 
    errors: 1
    input: a
    name: is& (nok + ok)
    schema: 
      - str
      - is&
      - 
        - b
        - a
    valid: 0
  - 
    errors: 1
    input: a
    name: is& (ok + nok)
    schema: 
      - str
      - is&
      - 
        - a
        - b
    valid: 0
  - 
    errors: 1
    input: a
    name: is& (nok + nok)
    schema: 
      - str
      - is&
      - 
        - b
        - b
    valid: 0
  - 
    input: a
    name: is.op=and (no items)
    schema: 
      - str
      - is
      - []

      - is.op
      - and
    valid: 1
  - 
    input: a
    name: is.op=and (ok)
    schema: 
      - str
      - is
      - *1
      - is.op
      - and
    valid: 1
  - 
    errors: 1
    input: a
    name: is.op=and (nok + ok)
    schema: 
      - str
      - is
      - 
        - b
        - a
      - is.op
      - and
    valid: 0
  - 
    errors: 1
    input: a
    name: is.op=and (ok + nok)
    schema: 
      - str
      - is
      - 
        - a
        - b
      - is.op
      - and
    valid: 0
  - 
    errors: 1
    input: a
    name: is.op=and (nok + nok)
    schema: 
      - str
      - is
      - 
        - b
        - b
      - is.op
      - and
    valid: 0
  - 
    input: a
    name: is| (no items)
    schema: 
      - str
      - is|
      - []

    valid: 1
  - 
    input: a
    name: is| (ok)
    schema: 
      - str
      - is|
      - *1
    valid: 1
  - 
    input: a
    name: is| (nok + ok)
    schema: 
      - str
      - is|
      - 
        - b
        - a
    valid: 1
  - 
    input: a
    name: is| (ok + nok)
    schema: 
      - str
      - is|
      - 
        - a
        - b
    valid: 1
  - 
    errors: 1
    input: a
    name: is| (nok + nok)
    schema: 
      - str
      - is|
      - 
        - b
        - b
    valid: 0
  - 
    input: a
    name: is.op=or (no items)
    schema: 
      - str
      - is
      - []

      - is.op
      - or
    valid: 1
  - 
    input: a
    name: is.op=or (ok)
    schema: 
      - str
      - is
      - *1
      - is.op
      - or
    valid: 1
  - 
    input: a
    name: is.op=or (nok + ok)
    schema: 
      - str
      - is
      - 
        - b
        - a
      - is.op
      - or
    valid: 1
  - 
    input: a
    name: is.op=or (ok + nok)
    schema: 
      - str
      - is
      - 
        - a
        - b
      - is.op
      - or
    valid: 1
  - 
    errors: 1
    input: a
    name: is.op=or (nok + nok)
    schema: 
      - str
      - is
      - 
        - b
        - b
      - is.op
      - or
    valid: 0
  - 
    input: a
    name: is.op=none (empty items)
    schema: 
      - str
      - is
      - []

      - is.op
      - none
    valid: 1
  - 
    input: a
    name: is.op=none (nok + nok)
    schema: 
      - str
      - is
      - 
        - b
        - b
      - is.op
      - none
    valid: 1
  - 
    errors: 1
    input: a
    name: is.op=none (nok + ok)
    schema: 
      - str
      - is
      - 
        - b
        - a
      - is.op
      - none
    valid: 0
  - 
    errors: 1
    input: a
    name: is.op=none (ok + nok)
    schema: 
      - str
      - is
      - 
        - a
        - b
      - is.op
      - none
    valid: 0
  - 
    errors: 1
    input: a
    name: is.op=none (ok + ok)
    schema: 
      - str
      - is
      - *1
      - is.op
      - none
    valid: 0
  - 
    input: a
    name: "in: must accept valid choices"
    schema: 
      - str
      - in
      - &2 
        - a
        - b
    valid: 1
  - 
    input: a
    name: "in: must reject empty choices"
    schema: 
      - str
      - in
      - []

    valid: 0
  - 
    input: a
    name: "!in (nok)"
    schema: 
      - str
      - "!in"
      - *2
    valid: 0
  - 
    input: a
    name: "!in (ok)"
    schema: 
      - str
      - "!in"
      - &3 []

    valid: 1
  - 
    input: a
    name: in.op=not (nok)
    schema: 
      - str
      - in
      - *2
      - in.op
      - not
    valid: 0
  - 
    input: a
    name: in.op=not (ok)
    schema: 
      - str
      - in
      - *3
      - in.op
      - not
    valid: 1
  - 
    input: a
    name: in& (no items)
    schema: 
      - str
      - in&
      - []

    valid: 1
  - 
    input: a
    name: in& (ok)
    schema: 
      - str
      - in&
      - &4 
        - *2
        - 
          - a
          - b
    valid: 1
  - 
    errors: 1
    input: a
    name: in& (nok + ok)
    schema: 
      - str
      - in&
      - 
        - *3
        - *2
    valid: 0
  - 
    errors: 1
    input: a
    name: in& (ok + nok)
    schema: 
      - str
      - in&
      - 
        - *2
        - *3
    valid: 0
  - 
    errors: 1
    input: a
    name: in& (nok + nok)
    schema: 
      - str
      - in&
      - 
        - *3
        - &5 []

    valid: 0
  - 
    input: a
    name: in.op=and (no items)
    schema: 
      - str
      - in
      - []

      - in.op
      - and
    valid: 1
  - 
    input: a
    name: in.op=and (ok)
    schema: 
      - str
      - in
      - *4
      - in.op
      - and
    valid: 1
  - 
    errors: 1
    input: a
    name: in.op=and (nok + ok)
    schema: 
      - str
      - in
      - 
        - *3
        - *2
      - in.op
      - and
    valid: 0
  - 
    errors: 1
    input: a
    name: in.op=and (ok + nok)
    schema: 
      - str
      - in
      - 
        - *2
        - *3
      - in.op
      - and
    valid: 0
  - 
    errors: 1
    input: a
    name: in.op=and (nok + nok)
    schema: 
      - str
      - in
      - 
        - *3
        - *5
      - in.op
      - and
    valid: 0
  - 
    input: a
    name: in| (no items)
    schema: 
      - str
      - in|
      - []

    valid: 1
  - 
    input: a
    name: in| (ok)
    schema: 
      - str
      - in|
      - *4
    valid: 1
  - 
    input: a
    name: in| (nok + ok)
    schema: 
      - str
      - in|
      - 
        - *3
        - *2
    valid: 1
  - 
    input: a
    name: in| (ok + nok)
    schema: 
      - str
      - in|
      - 
        - *2
        - *3
    valid: 1
  - 
    errors: 1
    input: a
    name: in| (nok + nok)
    schema: 
      - str
      - in|
      - 
        - *3
        - *5
    valid: 0
  - 
    input: a
    name: in.op=or (no items)
    schema: 
      - str
      - in
      - []

      - in.op
      - or
    valid: 1
  - 
    input: a
    name: in.op=or (ok)
    schema: 
      - str
      - in
      - *4
      - in.op
      - or
    valid: 1
  - 
    input: a
    name: in.op=or (nok + ok)
    schema: 
      - str
      - in
      - 
        - *3
        - *2
      - in.op
      - or
    valid: 1
  - 
    input: a
    name: in.op=or (ok + nok)
    schema: 
      - str
      - in
      - 
        - *2
        - *3
      - in.op
      - or
    valid: 1
  - 
    errors: 1
    input: a
    name: in.op=or (nok + nok)
    schema: 
      - str
      - in
      - 
        - *3
        - *5
      - in.op
      - or
    valid: 0
  - 
    input: a
    name: in.op=none (empty items)
    schema: 
      - str
      - in
      - []

      - in.op
      - none
    valid: 1
  - 
    input: a
    name: in.op=none (nok + nok)
    schema: 
      - str
      - in
      - 
        - *3
        - *5
      - in.op
      - none
    valid: 1
  - 
    errors: 1
    input: a
    name: in.op=none (nok + ok)
    schema: 
      - str
      - in
      - 
        - *3
        - *2
      - in.op
      - none
    valid: 0
  - 
    errors: 1
    input: a
    name: in.op=none (ok + nok)
    schema: 
      - str
      - in
      - 
        - *2
        - *3
      - in.op
      - none
    valid: 0
  - 
    errors: 1
    input: a
    name: in.op=none (ok + ok)
    schema: 
      - str
      - in
      - *4
      - in.op
      - none
    valid: 0
  - 
    input: a
    name: "min: a "
    schema: 
      - str
      - min
      - ''
    valid: 1
  - 
    input: a
    name: "min: a a"
    schema: 
      - str
      - min
      - a
    valid: 1
  - 
    input: ''
    name: "min:  a -> fail"
    schema: 
      - str
      - min
      - a
    valid: 0
  - 
    input: a
    name: "xmin: a "
    schema: 
      - str
      - xmin
      - ''
    valid: 1
  - 
    input: a
    name: "xmin: a a -> fail"
    schema: 
      - str
      - xmin
      - a
    valid: 0
  - 
    input: ''
    name: "xmin:  a -> fail"
    schema: 
      - str
      - xmin
      - a
    valid: 0
  - 
    input: a
    name: "max: a  -> fail"
    schema: 
      - str
      - max
      - ''
    valid: 0
  - 
    input: a
    name: "max: a a"
    schema: 
      - str
      - max
      - a
    valid: 1
  - 
    input: ''
    name: "max:  a"
    schema: 
      - str
      - max
      - a
    valid: 1
  - 
    input: a
    name: "xmax: a  -> fail"
    schema: 
      - str
      - xmax
      - ''
    valid: 0
  - 
    input: a
    name: "xmax: a a -> fail"
    schema: 
      - str
      - xmax
      - a
    valid: 0
  - 
    input: ''
    name: "xmax:  a"
    schema: 
      - str
      - xmax
      - a
    valid: 1
  - 
    input: a
    name: "between: a  & ab"
    schema: 
      - str
      - between
      - 
        - ''
        - ab
    valid: 1
  - 
    input: a
    name: "between: a  & a"
    schema: 
      - str
      - between
      - 
        - ''
        - a
    valid: 1
  - 
    input: a
    name: "between: a a & a"
    schema: 
      - str
      - between
      - 
        - a
        - a
    valid: 1
  - 
    input: ''
    name: "between:  a & ab -> fail"
    schema: 
      - str
      - between
      - 
        - a
        - ab
    valid: 0
  - 
    input: a
    name: "xbetween: a  & ab"
    schema: 
      - str
      - xbetween
      - 
        - ''
        - ab
    valid: 1
  - 
    input: a
    name: "xbetween: a  & a -> fail"
    schema: 
      - str
      - xbetween
      - 
        - ''
        - a
    valid: 0
  - 
    input: a
    name: "xbetween: a a & a -> fail"
    schema: 
      - str
      - xbetween
      - 
        - a
        - a
    valid: 0
  - 
    input: ''
    name: "xbetween:  a & ab -> fail"
    schema: 
      - str
      - xbetween
      - 
        - a
        - ab
    valid: 0
  - 
    input: a
    name: len (ok)
    schema: 
      - str
      - len
      - 1
    valid: 1
  - 
    input: a
    name: len (nok)
    schema: 
      - str
      - len
      - 3
    valid: 0
  - 
    input: a
    name: min_len (ok)
    schema: 
      - str
      - min_len
      - 1
    valid: 1
  - 
    input: a
    name: min_len (nok)
    schema: 
      - str
      - min_len
      - 3
    valid: 0
  - 
    input: a
    name: max_len (ok)
    schema: 
      - str
      - min_len
      - 1
    valid: 1
  - 
    input: abc
    name: max_len (nok)
    schema: 
      - str
      - max_len
      - 1
    valid: 0
  - 
    input: a
    name: len_between (ok)
    schema: 
      - str
      - len_between
      - 
        - 1
        - 3
    valid: 1
  - 
    input: abc
    name: len_between (nok)
    schema: 
      - str
      - len_between
      - 
        - 1
        - 1
    valid: 0
  - 
    input: abc
    name: each_index (ok)
    schema: 
      - str
      - each_index
      - 
        - int
        - max
        - 2
    valid: 1
  - 
    input: abc
    name: each_index (nok)
    schema: 
      - str
      - each_index
      - 
        - int
        - xmax
        - 2
    valid: 0
  - 
    input: abc
    name: each_elem (ok)
    schema: 
      - str
      - each_elem
      - str
    valid: 1
  - 
    input: abc
    name: each_elem (nok)
    schema: 
      - str
      - each_elem
      - float
    valid: 0
  - 
    input: a
    name: "match: (ok)"
    schema: 
      - str
      - match
      - "[abc]"
    valid: 1
  - 
    input: z
    name: "match: (nok)"
    schema: 
      - str
      - match
      - "[abc]"
    valid: 0
  - 
    dies: 1
    input: a
    name: "match: (dies, invalid regex)"
    schema: 
      - str
      - match
      - (
  - 
    input: a
    name: "is_re: 1 (ok)"
    schema: 
      - str
      - is_re
      - 1
    valid: 1
  - 
    input: a(
    name: "is_re: 1 (nok)"
    schema: 
      - str
      - is_re
      - 1
    valid: 0
  - 
    input: a(
    name: "is_re: 0 (ok)"
    schema: 
      - str
      - is_re
      - 0
    valid: 1
  - 
    input: a
    name: "is_re: 0 (nok)"
    schema: 
      - str
      - is_re
      - 0
    valid: 0
version: v0.9.22 (generated by devscripts/gen-type-spectest on Fri Jan 11 13:35:48 2013)
