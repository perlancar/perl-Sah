# this spectest tests valid forms of schema and its normalization

test_schema:
  - hash
  - keys:
      name: 'str*'
      input: any
      result: any
      dies: 'bool*'
    req_keys: [name, input]
    if: [expr, '!$data["dies"]', cset, {req_keys: [result]}]

tests:
  - name: 'schema must be defined'
    input: ~
    dies: Yes

  - name: 'string: type name must not be blank'
    input:  ''
    dies: Yes

  - name: 'string: type name must be valid (ok)'
    input:  'int'
    result: [int, {}]

  - name: 'string: type name must be valid (ok, has namespace)'
    input:  'foo::bar'
    result: ['foo::bar', {}]

  - name: 'string: type name must be valid (fail, has whitespace)'
    input:  'foo bar'
    dies: Yes

  - name: 'string: type name must be valid (fail, starts with number)'
    input:  '0int'
    dies: Yes

  - name: 'string: * suffix is allowed and normalized to req clause'
    input:  'int*'
    result: [int, {req: Yes}]

  - name: 'string: multiple * suffix is not allowed'
    input:  'int**'
    dies: Yes

  - name: 'array: must not be empty'
    input: []
    dies: Yes

  - name: 'array: type name must be valid (ok)'
    input: [int]
    result: [int, {}]

  - name: 'array: type name must be valid (fail, has whitespace)'
    input: ['foo bar']
    dies: Yes

  - name: 'array: * suffix is allowed and normalized to req clause'
    input:  ['int*']
    result: [int, {req: Yes}]

  - name: 'array: clause set must be hash (ok, empty)'
    input:  [int, {}]
    result: [int, {}]

  - name: 'array: clause set must be hash (ok, has some clauses)'
    input:  [int, {foo: 1, bar: 2}]
    result: [int, {foo: 1, bar: 2}]

  - name: 'array: clause set must be hash (fail, string)'
    input:  [int, foo]
    dies: Yes

  - name: 'array: clause set must be hash (fail, array)'
    input:  [int, []]
    dies: Yes

  - name: 'array: clause name must be valid (fail, has whitespace)'
    input:  ['int', {'foo bar': 2}]
    dies: Yes

  - name: 'array: clause name must be valid (fail, starts with number)'
    input:  ['int', {'0foo': 2}]
    dies: Yes

  - name: 'array: * suffix is allowed and normalized to req clause (2-element-array schema)'
    input:  ['int*', {foo: 1}]
    result: [int, {foo: 1, req: Yes}]

  - name: 'array: * suffix is allowed and normalized to req clause (overrides existing req clause)'
    input:  ['int*', {foo: 1, req: No}]
    result: [int, {foo: 1, req: Yes}]

  - name: 'array: clause attribute name must be valid (ok)'
    input:  [int, {'foo.bar': 1, 'foo.bar.baz': 2}]
    result: [int, {'foo.bar': 1, 'foo.bar.baz': 2}]

  - name: 'array: clause attribute name must be valid (fail, has whitespace)'
    input:  [int, {'foo.bar baz': 1}]
    dies: Yes

  - name: 'array: setting attribute on clause "" is permitted'
    input:  [int, {'.bar': 1, '.bar.baz': 2}]
    result: [int, {'.bar': 1, '.bar.baz': 2}]

  - name: 'array: setting value attribute on clause "" using syntax "" is not permitted'
    input:  [int, {'': 1}]
    dies: Yes

  - name: 'array: flattened clause set is permitted'
    input:  ['int', a, 1, b, 2]
    result: [int, {a: 1, b: 2}]

  - name: 'array: flattened clause set is permitted (with * suffix)'
    input:  ['int*', a, 1, b, 2]
    result: [int, {req: Yes, a: 1, b: 2}]

  - name: 'array: flattened clause set is permitted (fail, odd number of elements)'
    input:  ['int', a, 1, b, 2, c]
    dies: Yes

  - name: 'array: expression (clause=) is allowed on clause and normalized'
    input:  ['int', {'foo=': 2}]
    result: ['int', {'foo': 2, 'foo.is_expr': 1}]

  - name: 'array: expression (clause=) is allowed on clause.attr and normalized'
    input:  ['int', {'foo.bar=': 2}]
    result: ['int', {'foo.bar': 2, 'foo.bar.is_expr': 1}]

  - name: 'array: expression (clause=) must not conflict with literal value (fail)'
    input:  ['int', {'foo=': 2, foo: 3}]
    dies: Yes

  - name: 'array: expression (clause.attr=) must not conflict with literal value (fail)'
    input:  ['int', {'foo.bar=': 2, 'foo.bar': 3}]
    dies: Yes

  - name: 'array: !clause is normalized'
    input:  ['int', {'!foo': 2}]
    result: [int, {foo: 2, 'foo.max_ok': 0}]

  - name: 'array: !clause.attr is not allowed'
    input:  ['int', {'!foo.bar': 2}]
    dies: Yes

  - name: 'array: clause| is normalized'
    input:  ['int', {'foo|': [1, 2, 3]}]
    result: [int, {'foo': [1, 2, 3], 'foo.is_multi': 1, 'foo.min_ok': 1}]

  - name: 'array: clause.attr| is not allowed'
    input:  ['int', {'foo.bar|': [1, 2, 3]}]
    dies: Yes

  - name: 'array: clause| value must be array (fail, not array)'
    input:  ['int', {'foo|': 1}]
    dies: Yes

  - name: 'array: clause& is normalized'
    input:  ['int', {'foo&': [1, 2, 3]}]
    result: [int, {'foo': [1, 2, 3], 'foo.is_multi': 1}]

  - name: 'array: clause.attr& is not allowed'
    input:  ['int', {'foo.bar&': [1, 2, 3]}]
    dies: Yes

  - name: 'array: clause& value must be array (fail, not array)'
    input:  ['int', {'foo&': 1}]
    dies: Yes

  - name: 'array: !clause cannot be mixed with merge prefix'
    input: [int, {'merge.normal.!a': 1}]
    dies: Yes

  - name: 'array: !clause cannot be mixed with expression'
    input: [int, {'!a=': 1}]
    dies: Yes

  - name: 'array: clause| cannot be mixed with merge prefix'
    input: [int, {'merge.normal.a|': [1]}]
    dies: Yes

  - name: 'array: clause| cannot be mixed with expression'
    input: [int, {'a|=': [1]}]
    dies: Yes

  - name: 'array: clause& cannot be mixed with merge prefix'
    input: [int, {'merge.normal.a&': 1}]
    dies: Yes

  - name: 'array: clause& cannot be mixed with expression'
    input: [int, {'a&=': [1]}]
    dies: Yes

  - name: 'array: clause, !clause, clause&, and clause| must not conflict with one another (fail, c & !c)'
    input:  ['int', {foo: 1, '!foo': 2}]
    dies: Yes

  - name: 'array: clause, !clause, clause&, and clause| must not conflict with one another (fail, c & c|)'
    input:  ['int', {foo: 1, 'foo|': [3]}]
    dies: Yes

  - name: 'array: clause, !clause, clause&, and clause| must not conflict with one another (fail, c & c&)'
    input:  ['int', {foo: 1, 'foo&': [4]}]
    dies: Yes

  - name: 'array: clause, !clause, clause&, and clause| must not conflict with one another (fail, !c & c|)'
    input:  ['int', {'!foo': 2, 'foo|': [3]}]
    dies: Yes

  - name: 'array: clause, !clause, clause&, and clause| must not conflict with one another (fail, !c & c&)'
    input:  ['int', {'!foo': 2, 'foo&': [4]}]
    dies: Yes

  - name: 'array: clause, !clause, clause&, and clause| must not conflict with one another (fail, c| & c&)'
    input:  ['int', {'foo|': [3], 'foo&': [4]}]
    dies: Yes

  - name: 'array: merge prefix in clause is allowed'
    input:  [foo, {'merge.normal.a': 1, 'merge.add.a': 2, 'merge.concat.a': 3, 'merge.subtract.a': 4, 'merge.delete.a': 5, 'merge.keep.a': 6}]
    result: [foo, {'merge.normal.a': 1, 'merge.add.a': 2, 'merge.concat.a': 3, 'merge.subtract.a': 4, 'merge.delete.a': 5, 'merge.keep.a': 6}]

  #- name: 'array: merge prefix in clause is allowed (fail, unknown merging prefix)'
  #  input:  [foo, {'merge.foo.a': 1}]
  #  dies: Yes

  - name: 'array: extras must be hash (ok)'
    input:  ['int*', {}, {}]
    result: [int, {req: 1}, {}]

  - name: 'array: extras must be hash (fail, not hash)'
    input:  ['int*', {}, []]
    dies: Yes

  - name: 'array: def in extras must be hash (ok)'
    input:  [foo, {}, {def: {}}]
    result: [foo, {}, {def: {}}]

  - name: 'array: def in extras must be hash (fail)'
    input:  [foo, {}, {def: []}]
    dies: Yes

  - name: 'array: extra elements are not permitted'
    input:  [int, {}, {}, 1]
    dies: Yes

  - name: 'hash form (old DS syntax) is no longer recognized'
    input: {type: int}
    dies: Yes
